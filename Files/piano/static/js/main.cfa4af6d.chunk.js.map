{"version":3,"sources":["components/Key.js","App.js","serviceWorker.js","index.js"],"names":["ac","AudioContext","sfp","SoundFontPlayer","instrument","WhiteKey","props","state","isPlaying","handleKeyDownUp","bind","note","this","then","acoustic_grand_piano","play","setState","className","onMouseDown","onMouseUp","type","includes","Component","App","keys","n","push","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uPAGIA,EAAK,IAAIC,aACTC,EAAMC,IAAgBC,WAAWJ,EAAI,wBAGpBK,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,WAAY,GAGhB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAPR,E,4DAUHC,GACPC,KAAKL,MAAMC,WAChBN,EAAIW,MAAK,SAAUC,GACfA,EAAqBC,KAAKJ,MAI9BC,KAAKI,SAAS,CAAER,WAAaI,KAAKL,MAAMC,c,+BAIlC,IAAD,OACL,OACI,yBAAKS,UAAYL,KAAKL,MAAMC,UAAY,UAAY,QAASU,YAAa,kBAAM,EAAKT,gBAAgB,EAAKH,MAAMK,OAAOQ,UAAW,kBAAM,EAAKV,gBAAgB,EAAKH,MAAMK,OACxKS,KAAOR,KAAKN,MAAMc,MACbR,KAAKN,MAAMK,KAAKU,SAAS,MAA4B,UAApBT,KAAKN,MAAMc,KAAmB,8BAAOR,KAAKN,MAAMK,MAAe,U,GA1B3EW,aCwBvBC,E,uKApBX,IAJA,IAEIC,EAAO,GAEX,MAJc,CAAC,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,KAAM,MAItP,eAAuB,CAAlB,IAAMC,EAAC,KACNA,EAAEJ,SAAS,KACbG,EAAKE,KAAK,yBAAKT,UAAU,mBACzB,kBAAC,EAAD,CAAKN,KAAMc,EAAGL,KAAK,YAGnBI,EAAKE,KAAK,kBAAC,EAAD,CAAKf,KAAMc,EAAGL,KAAK,WAMjC,OAFAO,QAAQC,IAAIJ,GAGR,yBAAKP,UAAU,kBACZO,O,GApBOF,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.cfa4af6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport SoundFontPlayer from \"soundfont-player\";\n\nlet ac = new AudioContext();\nlet sfp = SoundFontPlayer.instrument(ac, 'acoustic_grand_piano');\n\n\nexport default class WhiteKey extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isPlaying : false\n        }\n\n        this.handleKeyDownUp = this.handleKeyDownUp.bind(this);\n    }\n\n    handleKeyDownUp(note) {\n        if (!this.state.isPlaying) {\n        sfp.then(function (acoustic_grand_piano) {\n            acoustic_grand_piano.play(note)\n          })\n        }\n        \n        this.setState({ isPlaying : !this.state.isPlaying});\n    }\n\n\n    render() {\n        return (\n            <div className={ this.state.isPlaying ? \"KeyDown\" : \"KeyUp\"} onMouseDown={() => this.handleKeyDownUp(this.props.note)} onMouseUp={() => this.handleKeyDownUp(this.props.note)}\n            type={ this.props.type }>\n                {this.props.note.includes('C') && this.props.type === 'white' ? <text>{this.props.note}</text> : null}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Key from './components/Key';\n\n\nclass App extends Component {\n  render() {\n    const notes = [\"C3\", \"C#3\", \"D3\", \"D#3\", \"E3\", \"F3\", \"F#3\", \"G3\", \"G#3\", \"A3\", \"A#3\", \"B3\", \"C4\", \"C#4\", \"D4\", \"D#4\", \"E4\", \"F4\", \"F#4\", \"G4\", \"G#4\", \"A4\", \"A#4\", \"B4\", \"C5\", \"C#5\", \"D5\", \"D#5\", \"E5\", \"F5\", \"F#5\", \"G5\", \"G#5\", \"A5\", \"A#5\", \"B5\", \"C6\"];\n\n    let keys = [];\n\n    for (const n of notes) {\n      if (n.includes('#')) {\n        keys.push(<div className=\"blackKeyWrapper\">\n        <Key note={n} type=\"black\" />\n      </div>)\n      } else {\n        keys.push(<Key note={n} type=\"white\"/>)\n      }\n    }\n\n    console.log(keys);\n\n    return (\n        <div className=\"pianoContainer\">\n          {keys}\n        </div>\n      );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}