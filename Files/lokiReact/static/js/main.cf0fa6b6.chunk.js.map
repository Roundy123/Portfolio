{"version":3,"sources":["components/Cards.js","components/CardList.js","components/SearchBox.js","components/locations.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","description","photo","react_default","a","createElement","className","alt","src","height","width","CardList","locations","map","location","i","Cards","key","id","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredLocations","filter","toLowerCase","includes","components_SearchBox","components_CardList","Component","Boolean","window","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAAgC,IAA9BC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,YAAaC,EAAWH,EAAXG,MAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,iBAAiBC,IAAKN,EAAOO,OAAO,QAAQC,MAAM,UAC3DP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcGU,EAnBE,SAAAZ,GAAiB,IAAfa,EAAeb,EAAfa,UAEjB,OACET,EAAAC,EAAAC,cAAA,WAEKO,EAAUC,IAAI,SAACC,EAASC,GACtB,OACEZ,EAAAC,EAAAC,cAACW,EAAD,CAAOC,IAAKL,EAAUG,GAAGG,GACvBA,GAAIN,EAAUG,GAAGG,GACjBlB,KAAMY,EAAUG,GAAGf,KACnBC,YAAaW,EAAUG,GAAGd,YAC1BC,MAAOU,EAAUG,GAAGb,YCCpBiB,EAbG,SAAApB,GAAiCA,EAA/BqB,YAA+B,IAAlBC,EAAkBtB,EAAlBsB,aAC/B,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACjBH,EAAAC,EAAAC,cAAA,SACEC,UAAY,mCACZgB,KAAK,SACLC,YAAY,mBACZC,SAAUH,MCTHT,EAAY,CACvB,CACEM,GAAI,EACJlB,KAAM,UACNC,YAAa,sBACbC,MAAO,0DAET,CACEgB,GAAI,EACJlB,KAAM,OACNC,YAAa,4BACbC,MAAO,6EAET,CACEgB,GAAI,EACJlB,KAAM,QACNC,YAAa,8CACbC,MAAO,yHAGT,CACEgB,GAAI,EACJlB,KAAM,eACNC,YAAa,kDACbC,MAAO,mKAET,CACEgB,GAAI,EACJlB,KAAM,eACNC,YAAa,sBACbC,MAAO,8JAET,CACEgB,GAAI,EACJlB,KAAM,SACNC,YAAa,+CACbC,MAAO,uKCAIuB,qBA3Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAPxCX,EAAKY,MAAQ,CACX1B,UAAWA,EACXQ,YAAa,IAJHM,wEAYJ,IAAAa,EAAAV,KACFW,EAAoBX,KAAKS,MAAM1B,UAAU6B,OAAO,SAAA3B,GACpD,OAAOA,EAASd,KAAK0C,cAAcC,SAASJ,EAAKD,MAAMlB,YAAYsB,iBAErE,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBACAH,EAAAC,EAAAC,cAACuC,EAAD,CAAWvB,aAAcQ,KAAKI,iBAC9B9B,EAAAC,EAAAC,cAACwC,EAAD,CAAUjC,UAAW4B,YArBXM,cCIEC,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,iECXNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf0fa6b6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, description, photo}) => {\n  return (\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='Location Photo' src={photo} height=\"300px\" width=\"400px\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{description}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Cards from './Cards';\n\nconst CardList = ({locations}) => {\n\n  return (\n    <div>\n       {\n         locations.map((location,i) => {\n           return (\n             <Cards key={locations[i].id}\n               id={locations[i].id}\n               name={locations[i].name}\n               description={locations[i].description}\n               photo={locations[i].photo}/>\n           )\n         })\n       }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className = 'pa2'>\n    <input\n      className = 'pa3 ba b--green bg-lightest-blue'\n      type=\"search\"\n      placeholder=\"search locations\"\n      onChange={searchChange}\n    />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","export const locations = [\n  {\n    id: 1,\n    name: \"Mancora\",\n    description: \"Party at the beach!\",\n    photo: \"https://ucd.hwstatic.com/propertyimages/3/31246/92.jpg\"\n  },\n  {\n    id: 2,\n    name: \"Lima\",\n    description: \"Visit Peru's capital city\",\n    photo: 'https://media-cdn.tripadvisor.com/media/photo-s/0e/91/d3/e8/loki-lima.jpg'\n  },\n  {\n    id: 3,\n    name: \"Cusco\",\n    description: \"The old Inka capital surrounded by culture.\",\n    photo: 'http://2.bp.blogspot.com/-RwaDWUX459M/T9y16VmEG6I/AAAAAAAAjh4/-6uhLgxfd84/s1600/Sunset%25252520Over%25252520Cusco.jpg'\n\n  },\n  {\n    id: 4,\n    name: \"Machu Picchu\",\n    description: \"Visit one of the greatest wonders of the world.\",\n    photo: 'https://images.ecosia.org/xTRPpYiL-4SmGIp6iEDwO3Yvnbs=/0x390/smart/https%3A%2F%2Fwww.backpackinglikeaboss.com%2Fwp-content%2Fuploads%2F2013%2F01%2Fimg_3290.jpg'\n  },\n  {\n    id: 5,\n    name: \"Santa Teresa\",\n    description: \"Esape to the forst.\",\n    photo: 'https://images.ecosia.org/UhnUIYK-2zqraofvLAs44pHGgnE=/0x390/smart/http%3A%2F%2Fwww.dosmanosperu.com%2Fblog%2Fwp-includes%2Fimages%2Fsanta-teresa-peru.jpg'\n  },\n  {\n    id: 6,\n    name: \"La Paz\",\n    description: \"Visit the highest capital city in the world.\",\n    photo: 'https://images.ecosia.org/on-PU5srjg7c3Go61OrBUAqPYtg=/0x390/smart/https%3A%2F%2Fmedia-cdn.tripadvisor.com%2Fmedia%2Fphoto-s%2F0e%2F8f%2F6e%2F53%2Floki-la-paz.jpg'\n  }\n]\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport { locations } from '../components/locations';\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      locations: locations,\n      searchfield: ''\n    }\n  }\n\nonSearchChange = (event) => {\n  this.setState({ searchfield: event.target.value})\n}\n\n  render () {\n    const filteredLocations = this.state.locations.filter(location => {\n      return location.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>loki Locations</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <CardList locations={filteredLocations}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}